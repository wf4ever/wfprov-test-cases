'''
Created on Sep 14, 2012

@author: zhaoj
'''
import os, os.path
import sys
import re
import unittest
import logging
import httplib
import urllib
try:
    # Running Python 2.5 with simplejson?
    import simplejson as json
except ImportError:
    import json
    
# Add main library directory to python path
sys.path.append("../../../..")
sys.path.append("..")

from MiscLib import TestUtils

from SparqlQueryTestCase import SparqlQueryTestCase


class TestUniqueness(SparqlQueryTestCase):
    
    def setUp(self):
        super(TestUniqueness, self).setUp()
        return

    def tearDown(self):
        super(TestUniqueness, self).tearDown()
        return

    #### constraint 25
    #### Entities may have multiple generation or invalidation events 
    #### (either or both may, however, be left implicit). 
    #### An entity can be generated by more than one activity, 
    #### with one generation event per each entity-activity pair. 
    #### These events must be simultaneous
    
    def testUniqueGeneration(self):
        sparqlquery  = """
            PREFIX prov: <http://www.w3.org/ns/prov#>
            prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
            SELECT distinct ?xstart ?ystart
            WHERE {
                ?entity rdf:type prov:Entity; prov:wasGeneratedBy ?x .
                ?entity rdf:type prov:Entity; prov:wasGeneratedBy ?y .
                Filter (?x != ?y)
                ?x rdf:type prov:Activity; prov:startedAtTime ?xstart .
                ?y rdf:type prov:Activity; prov:startedAtTime ?ystart .
                Filter (?xstart != ?ystart)
            }
            """
        data = self.doQueryPOST(sparqlquery, JSON=True)
        self.assertBindingEqual(data, 0, "Entity was generated by two activities that are not simultaneous.")
        
    #### constraint 26
    
    def testUniqueInvalidation(self):
        sparqlquery  = """
            PREFIX prov: <http://www.w3.org/ns/prov#>
            prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
            SELECT distinct ?xstart ?ystart
            WHERE {
                ?entity rdf:type prov:Entity; prov:wasGeneratedBy ?x .
                ?entity rdf:type prov:Entity; prov:wasGeneratedBy ?y .
                Filter (?x != ?y)
                ?x rdf:type prov:Activity; prov:startedAtTime ?xstart .
                ?y rdf:type prov:Activity; prov:startedAtTime ?ystart .
                Filter (?xstart != ?ystart)
            }
            """
        data = self.doQueryPOST(sparqlquery, JSON=True)
        self.assertBindingEqual(data, 0, "Entity was invalidated by two activities that are not simultaneous.")
        
    #### constraint 27: the triggering entity linking any two activities in a start or end event is unique. That is, an activity may be started by several other activities, with shared or separate triggering entities.
    
    def testUniqueStartedBy(self):
        sparqlquery  = """
            PREFIX prov: <http://www.w3.org/ns/prov#>
            prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
            SELECT distinct ?x ?y
            WHERE {
                ?activity rdf:type prov:Activity; prov:wasStartedBy ?x .
                ?activity rdf:type prov:Activity; prov:wasStartedBy ?y .
                Filter (?x != ?y)
            }
            """
        data = self.doQueryPOST(sparqlquery, JSON=True)
        self.assertBindingEqual(data, 0, "Activity was started by two activities")
        
    #### constraint 28
    
    def testUniqueEndedBy(self):
        sparqlquery  = """
            PREFIX prov: <http://www.w3.org/ns/prov#>
            prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>  
            SELECT distinct ?x ?y
            WHERE {
                ?activity rdf:type prov:Activity; prov:wasEndedBy ?x .
                ?activity rdf:type prov:Activity; prov:wasEndedBy ?y .
                Filter (?x != ?y)
            }
            """
        data = self.doQueryPOST(sparqlquery, JSON=True)
        self.assertBindingEqual(data, 0, "Activity was ended by two activities")
        
    #### constraint 29
    
    def testUniqueStartTime(self):
        sparqlquery  = """
            PREFIX prov: <http://www.w3.org/ns/prov#> 
            prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            SELECT distinct ?x ?y
            WHERE {
                ?activity rdf:type prov:Activity; prov:startedAtTime ?x .
                ?activity rdf:type prov:Activity; prov:startedAtTime ?y .
                Filter (?x != ?y)
            }
            """
        data = self.doQueryPOST(sparqlquery, JSON=True)
        self.assertBindingEqual(data, 0, "An activity can only have one start time")

    #### constraint 30
    
    def testUniqueEndTime(self):
        sparqlquery  = """
            PREFIX prov: <http://www.w3.org/ns/prov#> 
            prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            SELECT distinct ?x ?y
            WHERE {
                ?activity rdf:type prov:Activity; prov:endedAtTime ?x .
                ?activity rdf:type prov:Activity; prov:endedAtTime ?y .
                Filter (?x != ?y)
            }
            """
        data = self.doQueryPOST(sparqlquery, JSON=True)
        self.assertBindingEqual(data, 0, "An activity can only have one end time")


def getTestSuite(select="unit"):
    """
    Get test suite

    select  is one of the following:
            "unit"      return suite of unit tests only
            "component" return suite of unit and component tests
            "all"       return suite of unit, component and integration tests
            "pending"   return suite of pending tests
            name        a single named test to be run
    """
    testdict = {
        "unit":
            [ 
             "testUniqueGeneration",
             "testUniqueInvalidation",
             "testUniqueStartedBy",
             "testUniqueEndedBy",
             "testUniqueStartTime",
             "testUniqueEndTime"
            ],
        }
    return TestUtils.getTestSuite(TestUniqueness, testdict, select=select)

if __name__ == "__main__":
    TestUtils.runTests("TestUniqueness", getTestSuite, sys.argv)

# End.
